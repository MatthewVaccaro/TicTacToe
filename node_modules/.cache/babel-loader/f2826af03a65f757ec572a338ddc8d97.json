{"ast":null,"code":"export function checkWin(capturedSpots) {\n  const winning = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // The loop is going to go through each array\n\n  for (let i = 0; i < winning.length; i++) {\n    //destructure the array to match against function perams\n    const [a, b, c] = winning[i]; // Check to see if A = index 0 is captured. If not move onto the next array\n\n    if (capturedSpots[a] && capturedSpots[a] === capturedSpots[b] && capturedSpots[b] === capturedSpots[c]) {\n      // ^ It's looking to see if each of the index specifided has the same value ( either \"X\"  || \"O\")\n      // If all three match then return the value (either \"X\" || \"O\")\n      return capturedSpots[a];\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["/Users/mattvaccaro/Documents/git/ticTacToe/src/helpers.js"],"names":["checkWin","capturedSpots","winning","i","length","a","b","c"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,aAAlB,EAAiC;AACvC,QAAMC,OAAO,GAAG,CACf,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CADe,EAEf,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAFe,EAGf,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAHe,EAIf,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAJe,EAKf,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CALe,EAMf,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CANe,EAOf,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CAPe,EAQf,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,CARe,CAAhB,CADuC,CAWvC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACxC;AACA,UAAM,CAAEE,CAAF,EAAKC,CAAL,EAAQC,CAAR,IAAcL,OAAO,CAACC,CAAD,CAA3B,CAFwC,CAGxC;;AACA,QAAIF,aAAa,CAACI,CAAD,CAAb,IAAoBJ,aAAa,CAACI,CAAD,CAAb,KAAqBJ,aAAa,CAACK,CAAD,CAAtD,IAA6DL,aAAa,CAACK,CAAD,CAAb,KAAqBL,aAAa,CAACM,CAAD,CAAnG,EAAwG;AACvG;AACA;AACA,aAAON,aAAa,CAACI,CAAD,CAApB;AACA;AACD;;AACD,SAAO,IAAP;AACA","sourcesContent":["export function checkWin(capturedSpots) {\n\tconst winning = [\n\t\t[ 0, 1, 2 ],\n\t\t[ 3, 4, 5 ],\n\t\t[ 6, 7, 8 ],\n\t\t[ 0, 3, 6 ],\n\t\t[ 1, 4, 7 ],\n\t\t[ 2, 5, 8 ],\n\t\t[ 0, 4, 8 ],\n\t\t[ 2, 4, 6 ]\n\t];\n\t// The loop is going to go through each array\n\tfor (let i = 0; i < winning.length; i++) {\n\t\t//destructure the array to match against function perams\n\t\tconst [ a, b, c ] = winning[i];\n\t\t// Check to see if A = index 0 is captured. If not move onto the next array\n\t\tif (capturedSpots[a] && capturedSpots[a] === capturedSpots[b] && capturedSpots[b] === capturedSpots[c]) {\n\t\t\t// ^ It's looking to see if each of the index specifided has the same value ( either \"X\"  || \"O\")\n\t\t\t// If all three match then return the value (either \"X\" || \"O\")\n\t\t\treturn capturedSpots[a];\n\t\t}\n\t}\n\treturn null;\n}\n"]},"metadata":{},"sourceType":"module"}